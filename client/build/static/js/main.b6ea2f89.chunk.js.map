{"version":3,"sources":["actions/index.js","components/App.js","reducers/index.js","reducers/songsReducer.js","index.js"],"names":["spotifyApi","SpotifyWebApi","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nowPlaying","currentSong","props","songs","console","log","react_default","a","createElement","Fragment","name","token","getHashParams","access_token","setAccessToken","state","loggedIn","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","getCurrentSong","_this2","getPlaylistTracks","playlistId","then","response","setState","_this3","className","href","onClick","getNowPlaying","getListOfSongs","Component","connect","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","getMyCurrentPlaybackState","sent","type","payload","item","stop","_x","apply","arguments","combineReducers","length","undefined","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"gRACMA,EAAa,IAAIC,ICGjBD,EAAa,IAAIC,IAEjBC,cAEJ,SAAAA,IAAc,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAwCFI,WAAa,WACX,IAAMC,EAAcR,EAAKS,MAAMC,MAE/B,OADAC,QAAQC,IAAIJ,GACRA,EAEAK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,4BAAoBP,EAAYS,KAAhC,MAIG,MAjDT,IACMC,EADSlB,EAAKmB,gBACCC,aAHT,OAIRF,GACFrB,EAAWwB,eAAeH,GAE5BlB,EAAKsB,MAAQ,CACXC,WAAUL,GARAlB,+EAaZ,IACIwB,EADAC,EAAa,GACVC,EAAI,uBACTC,EAAIC,OAAOC,SAASC,KAAKC,UAAU,GAErC,IADAP,EAAIE,EAAEM,KAAKL,GACJH,GACLC,EAAWD,EAAE,IAAMS,mBAAmBT,EAAE,IACxCA,EAAIE,EAAEM,KAAKL,GAEb,OAAOF,0CAIPtB,KAAKM,MAAMyB,iBACXvB,QAAQC,IAAIT,KAAKM,MAAMC,gDAIR,IAAAyB,EAAAhC,KACfN,EAAWuC,kBAAkB,CAAEC,WAAY,QACxCC,KAAK,SAACC,GACL5B,QAAQC,IAAI2B,GACZJ,EAAKK,SAAS,CACZjC,WAAY,wCAoBX,IAAAkC,EAAAtC,KACP,OACEU,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,OACb7B,EAAAC,EAAAC,cAAA,KAAG4B,KAAK,yBAAR,sBACCxC,KAAKI,aAELJ,KAAKmB,MAAMC,UACVV,EAAAC,EAAAC,cAAA,UAAQ6B,QAAS,kBAAMH,EAAKI,kBAA5B,qBAKFhC,EAAAC,EAAAC,cAAA,UAAQ6B,QAAS,kBAAMH,EAAKK,mBAA5B,6BArEUC,aAmFHC,cANS,SAAA1B,GACtB,MAAO,CACLZ,MAAOY,EAAMZ,QAMf,CAAEwB,eDxF0B,iCAAAe,EAAAhD,OAAAiD,EAAA,EAAAjD,CAAAkD,EAAArC,EAAAsC,KAAM,SAAAC,EAAMC,GAAN,IAAAf,EAAA,OAAAY,EAAArC,EAAAyC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACT7D,EAAW8D,4BADF,OAC1BpB,EAD0BiB,EAAAI,KAGhCN,EAAS,CAAEO,KAAM,mBAAoBC,QAASvB,EAASwB,OAHvB,wBAAAP,EAAAQ,SAAAX,MAAN,gBAAAY,GAAA,OAAAhB,EAAAiB,MAAA/D,KAAAgE,YAAA,KCsFfnB,CAEOjD,GCxFPqE,cAAgB,CAC7B1D,MCJa,WAAwB,IAAvBY,EAAuB6C,UAAAE,OAAA,QAAAC,IAAAH,UAAA,GAAAA,UAAA,GAAf,GAAII,EAAWJ,UAAAE,OAAA,EAAAF,UAAA,QAAAG,EAErC,OAAQC,EAAOV,MACb,IAAK,mBACH,OAAOU,EAAOT,QAChB,QACE,OAAOxC,MCGPkD,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACPjE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAUP,MAAOA,GACf3D,EAAAC,EAAAC,cAACiE,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.b6ea2f89.chunk.js","sourcesContent":["import SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi(); \n\nexport const getCurrentSong = () => async dispatch => {\n    const response = await spotifyApi.getMyCurrentPlaybackState();\n  \n    dispatch({ type: 'GET_CURRENT_SONG', payload: response.item});\n  }\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getCurrentSong } from '../actions';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      loggedIn: token ? true : false\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getNowPlaying() {\n    this.props.getCurrentSong();\n    console.log(this.props.songs);\n\n  }\n\n  getListOfSongs() {\n    spotifyApi.getPlaylistTracks({ playlistId: \"233\" })\n      .then((response) => {\n        console.log(response);\n        this.setState({\n          nowPlaying: {\n          }\n        });\n      })\n  }\n\n  nowPlaying = () => {\n    const currentSong = this.props.songs;\n    console.log(currentSong);\n    if (currentSong) {\n      return (\n        <>\n          <div> Now Playing: {currentSong.name} </div>\n        </>\n      )\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <a href='http://localhost:5000' > Login to Spotify </a>\n        {this.nowPlaying()}\n\n        {this.state.loggedIn &&\n          <button onClick={() => this.getNowPlaying()}>\n            Check Now Playing\n            </button>\n\n        }\n        <button onClick={() => this.getListOfSongs()}>\n          Get List of songs\n            </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    songs: state.songs\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  { getCurrentSong })(App);","import { combineReducers } from 'redux';\nimport songsReducer from './songsReducer';\n\nexport default combineReducers({\n  songs: songsReducer\n});","export default (state = [], action) => {\n\n  switch (action.type) {\n    case 'GET_CURRENT_SONG':\n      return action.payload;\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}